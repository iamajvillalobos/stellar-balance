{"version":3,"sources":["AddressTextField.js","CheckBalanceButton.js","ResultsTableRow.js","ResultsTable.js","Notification.js","AddressChecker.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["AddressTextField","_ref","onTextChange","react_default","a","createElement","className","type","onChange","event","target","value","placeholder","STELLAR_API_URL","AddressCheckerButton","address","onButtonClick","onError","onClick","url","concat","axios","get","then","response","balances","data","status","catch","error","ResultsTableRow","tokenName","asset_code","balance","ResultsTable","map","index","src_ResultsTableRow","key","Notification","message","href","preventDefault","AddressChecker","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleBalanceChange","setState","handleAddressTextFieldChange","handleError","code","handleNotificationClose","state","src_Notification","src_AddressTextField","CheckBalanceButton","length","src_ResultsTable","React","Component","Footer","rel","App","src_AddressChecker","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25713fec.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction AddressTextField({ onTextChange }) {\n  function handleAddressTextFieldChange(event) {\n    onTextChange(event.target.value);\n  }\n\n  return (\n    <div className=\"address-text-field\">\n      <input\n        type=\"text\"\n        onChange={handleAddressTextFieldChange}\n        placeholder=\"GCFXHS4GXL6BVUCXBWXGTITROWLVYXQKQLF4YH5O5JT3YZXCYPAFBJZB\"\n      />\n    </div>\n  );\n}\n\nexport default AddressTextField;\n","import React from \"react\";\nimport axios from \"axios\";\n\nconst STELLAR_API_URL = \"https://horizon.stellar.org/accounts\";\n\nfunction AddressCheckerButton({ address, onButtonClick, onError }) {\n  function fetchAddressBalances() {\n    const url = `${STELLAR_API_URL}/${address}`;\n    axios\n      .get(url)\n      .then(response => {\n        const balances = response.data.balances;\n        onButtonClick(balances);\n        onError(response.status);\n      })\n      .catch(error => {\n        onError(error.response.status);\n      });\n  }\n\n  return (\n    <div className=\"check-balance-button\">\n      <button onClick={fetchAddressBalances}>Check Balance</button>\n    </div>\n  );\n}\n\nexport default AddressCheckerButton;\n","import React from \"react\";\n\nfunction ResultsTableRow({ data }) {\n  const tokenName = data.asset_code ? data.asset_code : \"XLM\";\n  const balance = data.balance;\n\n  return (\n    <div className=\"content-row\">\n      <span className=\"row-item\">{tokenName}</span>\n      <span className=\"row-item\">{balance}</span>\n    </div>\n  );\n}\n\nexport default ResultsTableRow;\n","import React from \"react\";\nimport ResultsTableRow from \"./ResultsTableRow\";\n\nfunction ResultsTable({ balances }) {\n  return (\n    <div className=\"results-table\">\n      <div className=\"table-header\">\n        <span className=\"header-item\">Token</span>\n        <span className=\"header-item\">Total</span>\n      </div>\n      <div className=\"table-contents\">\n        {balances.map((balance, index) => {\n          return <ResultsTableRow data={balance} key={index} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ResultsTable;\n","import React from \"react\";\n\nfunction Notification({ message, onClick }) {\n  function handleCloseAction(event) {\n    event.preventDefault();\n    onClick();\n  }\n\n  return (\n    <div className=\"notification\">\n      <span className=\"message\">{message}</span>\n      <a href=\"\" className=\"close-button\" onClick={handleCloseAction}>\n        Close\n      </a>\n    </div>\n  );\n}\n\nexport default Notification;\n","import React from \"react\";\nimport AddressTextField from \"./AddressTextField\";\nimport CheckBalanceButton from \"./CheckBalanceButton\";\nimport ResultsTable from \"./ResultsTable\";\nimport Notification from \"./Notification\";\n\nclass AddressChecker extends React.Component {\n  constructor() {\n    super();\n    this.state = { balances: [], address: \"\", error: null };\n  }\n\n  handleBalanceChange = balances => {\n    this.setState({ balances: balances });\n  };\n\n  handleAddressTextFieldChange = address => {\n    this.setState({ address: address });\n  };\n\n  handleError = code => {\n    const message = \"Address is invalid\";\n\n    if (code === 404 || code === 400) {\n      this.setState({ error: message });\n      this.setState({ balances: [] });\n    } else {\n      this.setState({ error: null });\n    }\n  };\n\n  handleNotificationClose = () => {\n    this.setState({ error: null });\n  };\n\n  render() {\n    return (\n      <div className=\"address-checker\">\n        <div className=\"container\">\n          <div className=\"section\">\n            <div className=\"columns is-centered\">\n              <div className=\"column is-half\">\n                {this.state.error ? (\n                  <Notification\n                    message={this.state.error}\n                    onClick={this.handleNotificationClose}\n                  />\n                ) : null}\n\n                <h1 className=\"title\">Enter your public xlm address</h1>\n                <p className=\"subtitle\">\n                  Your public address starts with <strong>G</strong>. Don&#x27;t\n                  paste here your secret key that starts with <strong>S</strong>\n                  .\n                </p>\n                <AddressTextField\n                  onTextChange={this.handleAddressTextFieldChange}\n                />\n                <CheckBalanceButton\n                  onButtonClick={this.handleBalanceChange}\n                  address={this.state.address}\n                  onError={this.handleError}\n                />\n                {this.state.balances.length > 0 ? (\n                  <ResultsTable balances={this.state.balances} />\n                ) : null}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AddressChecker;\n","import React from \"react\";\n\nfunction Footer() {\n  const reactUrl = \"https://reactjs.org/\";\n  const siteUrl = \"http://iamajvillalobos.micro.blog/about/\";\n  const repoUrl = \"https://github.com/iamajvillalobos/stellar-balance\";\n\n  return (\n    <footer>\n      <div className=\"container\">\n        <p>\n          This project is not affiliated with Stellar. It is an &nbsp;\n          <a href={repoUrl}>open-source project</a> to showcase my learnings\n          with <a href={reactUrl}>React</a>. Created by &nbsp;\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={siteUrl}>\n            AJ Villalobos\n          </a>\n        </p>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport AddressChecker from \"./AddressChecker\";\nimport Footer from \"./Footer\";\nimport \"./index.scss\";\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <AddressChecker />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}