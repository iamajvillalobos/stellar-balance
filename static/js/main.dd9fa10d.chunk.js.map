{"version":3,"sources":["AddressTextField.js","fetchXLMAddressBalances.js","fetchXLMAddressFromFederation.js","isFederatedAddress.js","CheckBalanceButton.js","ResultsTableRow.js","ResultsTable.js","Notification.js","AddressChecker.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["AddressTextField","_ref","onTextChange","react_default","a","createElement","className","type","onChange","event","target","value","placeholder","fetchXLMAddressBalances","address","url","concat","axios","get","then","response","data","balances","catch","error","statusText","fetchXLMAddressFromFederation","length","domain","split","account_id","isFederatedAddress","AddressCheckerButton","onButtonClick","onError","_fetchAddressBalances","Object","asyncToGenerator","regenerator_default","mark","_callee","xlmAddress","result","_result","wrap","_context","prev","next","sent","Array","isArray","stop","this","apply","arguments","onClick","ResultsTableRow","tokenName","asset_code","balance","ResultsTable","map","index","src_ResultsTableRow","key","Notification","message","preventDefault","AddressChecker","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleBalanceChange","setState","handleAddressTextFieldChange","handleError","handleNotificationClose","state","src_Notification","src_AddressTextField","CheckBalanceButton","src_ResultsTable","React","Component","Footer","href","rel","App","src_AddressChecker","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd9fa10d.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction AddressTextField({ onTextChange }) {\n  function handleAddressTextFieldChange(event) {\n    onTextChange(event.target.value);\n  }\n\n  return (\n    <div className=\"address-text-field\">\n      <input\n        type=\"text\"\n        onChange={handleAddressTextFieldChange}\n        placeholder=\"GCFXHS4GXL6BVUCXBWXGTITROWLVYXQKQLF4YH5O5JT3YZXCYPAFBJZB\"\n      />\n    </div>\n  );\n}\n\nexport default AddressTextField;\n","import axios from \"axios\";\n\nfunction fetchXLMAddressBalances(address) {\n  const url = `https://horizon.stellar.org/accounts/${address}`;\n  return axios\n    .get(url)\n    .then(response => {\n      return response.data.balances;\n    })\n    .catch(error => {\n      return error.response.statusText;\n    });\n}\n\nexport default fetchXLMAddressBalances;\n","import axios from \"axios\";\n\nfunction fetchXLMAddressFromFederation(address) {\n  if (address.length === 0) {\n    return \"\";\n  }\n\n  const domain = address.split(\"*\")[1];\n  const url = `https://federation.${domain}/federation?q=${address}`;\n  return axios\n    .get(url)\n    .then(response => {\n      return response.data.account_id;\n    })\n    .catch(error => {\n      return \"\";\n    });\n}\n\nexport default fetchXLMAddressFromFederation;\n","function isFederatedAddress(address) {\n  const result = address.split(\"*\");\n  return result.length > 1 ? true : false;\n}\n\nexport default isFederatedAddress;\n","import React from \"react\";\nimport fetchXLMAddressBalances from \"./fetchXLMAddressBalances\";\nimport fetchXLMAddressFromFederation from \"./fetchXLMAddressFromFederation\";\nimport isFederatedAddress from \"./isFederatedAddress\";\n\nfunction AddressCheckerButton({ address, onButtonClick, onError }) {\n  async function fetchAddressBalances() {\n    if (isFederatedAddress(address)) {\n      let xlmAddress = await fetchXLMAddressFromFederation(address);\n      if (xlmAddress.length > 0) {\n        let result = await fetchXLMAddressBalances(xlmAddress);\n        if (Array.isArray(result)) {\n          onButtonClick(result);\n        } else {\n          onError(result);\n        }\n      } else {\n        onError(\"Not Found\");\n      }\n    } else {\n      let result = await fetchXLMAddressBalances(address);\n      if (Array.isArray(result)) {\n        onButtonClick(result);\n      } else {\n        onError(result);\n      }\n    }\n  }\n\n  return (\n    <div className=\"check-balance-button\">\n      <button onClick={fetchAddressBalances}>Check Balance</button>\n    </div>\n  );\n}\n\nexport default AddressCheckerButton;\n","import React from \"react\";\n\nfunction ResultsTableRow({ data }) {\n  const tokenName = data.asset_code ? data.asset_code : \"XLM\";\n  const balance = data.balance;\n\n  return (\n    <div className=\"content-row\">\n      <span className=\"row-item\">{tokenName}</span>\n      <span className=\"row-item\">{balance}</span>\n    </div>\n  );\n}\n\nexport default ResultsTableRow;\n","import React from \"react\";\nimport ResultsTableRow from \"./ResultsTableRow\";\n\nfunction ResultsTable({ balances }) {\n  return (\n    <div className=\"results-table\">\n      <div className=\"table-header\">\n        <span className=\"header-item\">Token</span>\n        <span className=\"header-item\">Total</span>\n      </div>\n      <div className=\"table-contents\">\n        {balances.map((balance, index) => {\n          return <ResultsTableRow data={balance} key={index} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default ResultsTable;\n","import React from \"react\";\n\nfunction Notification({ message, onClick }) {\n  function handleCloseAction(event) {\n    event.preventDefault();\n    onClick();\n  }\n\n  return (\n    <div className=\"notification\">\n      <span className=\"message\">{message}</span>\n      <button className=\"close-button is-link\" onClick={handleCloseAction}>\n        Close\n      </button>\n    </div>\n  );\n}\n\nexport default Notification;\n","import React from \"react\";\nimport AddressTextField from \"./AddressTextField\";\nimport CheckBalanceButton from \"./CheckBalanceButton\";\nimport ResultsTable from \"./ResultsTable\";\nimport Notification from \"./Notification\";\n\nclass AddressChecker extends React.Component {\n  constructor() {\n    super();\n    this.state = { balances: [], address: \"\", error: null };\n  }\n\n  handleBalanceChange = balances => {\n    this.setState({ balances });\n    this.setState({ error: null });\n  };\n\n  handleAddressTextFieldChange = address => {\n    this.setState({ address });\n  };\n\n  handleError = error => {\n    this.setState({ balances: [] });\n    this.setState({ error });\n  };\n\n  handleNotificationClose = () => {\n    this.setState({ error: null });\n  };\n\n  render() {\n    return (\n      <div className=\"address-checker\">\n        <div className=\"container\">\n          <div className=\"section\">\n            <div className=\"columns is-centered\">\n              <div className=\"column is-half\">\n                {this.state.error ? (\n                  <Notification\n                    message={this.state.error}\n                    onClick={this.handleNotificationClose}\n                  />\n                ) : null}\n\n                <h1 className=\"title\">Enter your public xlm address</h1>\n                <p className=\"subtitle\">\n                  You can also enter your federated address like&nbsp;\n                  <strong>user@email.com*stellarx.com</strong>\n                </p>\n                <AddressTextField\n                  onTextChange={this.handleAddressTextFieldChange}\n                />\n                <CheckBalanceButton\n                  onButtonClick={this.handleBalanceChange}\n                  address={this.state.address}\n                  onError={this.handleError}\n                />\n                {this.state.balances.length > 0 ? (\n                  <ResultsTable balances={this.state.balances} />\n                ) : null}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AddressChecker;\n","import React from \"react\";\n\nfunction Footer() {\n  const siteUrl = \"http://iamajvillalobos.micro.blog/about/\";\n  const repoUrl = \"https://github.com/iamajvillalobos/stellar-balance\";\n\n  return (\n    <footer>\n      <div className=\"container\">\n        <p>\n          This project is not affiliated with Stellar. It is an{\" \"}\n          <a href={repoUrl}>open-source project</a> created by{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={siteUrl}>\n            AJ Villalobos\n          </a>\n          .\n        </p>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport AddressChecker from \"./AddressChecker\";\nimport Footer from \"./Footer\";\nimport \"./index.scss\";\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <AddressChecker />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}